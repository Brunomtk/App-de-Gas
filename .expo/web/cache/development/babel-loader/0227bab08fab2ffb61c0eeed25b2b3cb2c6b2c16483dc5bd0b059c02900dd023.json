{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from \"./constants\";\nimport normalizeValueWithProperty from \"./normalizeValueWithProperty\";\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = transform[type];\n  if (type === 'matrix' || type === 'matrix3d') {\n    return type + \"(\" + value.join(',') + \")\";\n  } else {\n    var normalizedValue = normalizeValueWithProperty(value, type);\n    return type + \"(\" + normalizedValue + \")\";\n  }\n};\nvar resolveTransform = function resolveTransform(resolvedStyle, style) {\n  var transform = style.transform;\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  }\n  resolvedStyle.transform = transform;\n};\nvar createReactDOMStyle = function createReactDOMStyle(style) {\n  if (!style) {\n    return emptyObject;\n  }\n  var resolvedStyle = {};\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = normalizeValueWithProperty(style[prop], prop);\n    if (value == null) {\n      return;\n    }\n    switch (prop) {\n      case 'elevation':\n      case 'overlayColor':\n      case 'resizeMode':\n      case 'tintColor':\n        {\n          break;\n        }\n      case 'aspectRatio':\n        {\n          resolvedStyle[prop] = value.toString();\n          break;\n        }\n      case 'backgroundClip':\n        {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n          break;\n        }\n      case 'flex':\n        {\n          if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          } else {\n            resolvedStyle.flex = value;\n          }\n          break;\n        }\n      case 'font':\n        {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n      case 'fontFamily':\n        {\n          if (value.indexOf('System') > -1) {\n            var stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n          break;\n        }\n      case 'fontVariant':\n        {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n          break;\n        }\n      case 'textAlignVertical':\n        {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n      case 'textDecorationLine':\n        {\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n          break;\n        }\n      case 'transform':\n      case 'transformMatrix':\n        {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n      case 'writingDirection':\n        {\n          resolvedStyle.direction = value;\n          break;\n        }\n      default:\n        {\n          var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n          if (longFormProperties) {\n            longFormProperties.forEach(function (longForm, i) {\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n    }\n  });\n  return resolvedStyle;\n};\nexport default createReactDOMStyle;","map":{"version":3,"names":["canUseDOM","MONOSPACE_FONT_STACK","SYSTEM_FONT_STACK","STYLE_SHORT_FORM_EXPANSIONS","normalizeValueWithProperty","emptyObject","supportsCSS3TextDecoration","window","CSS","supports","mapTransform","transform","type","Object","keys","value","join","normalizedValue","resolveTransform","resolvedStyle","style","Array","isArray","map","createReactDOMStyle","sort","forEach","prop","toString","backgroundClip","WebkitBackgroundClip","flexGrow","flexShrink","flexBasis","flex","replace","indexOf","stack","split","length","fontVariant","verticalAlign","textDecoration","textDecorationLine","direction","longFormProperties","longForm","i"],"sources":["C:/Users/leova/Desktop/marcio gas/marcio gas/node_modules/react-native-web/src/exports/StyleSheet/createReactDOMStyle.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from './constants';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\n\n/**\n * The browser implements the CSS cascade, where the order of properties is a\n * factor in determining which styles to paint. React Native is different. It\n * gives giving precedence to the more specific style property. For example,\n * the value of `paddingTop` takes precedence over that of `padding`.\n *\n * This module creates mutally exclusive style declarations by expanding all of\n * React Native's supported shortform properties (e.g. `padding`) to their\n * longfrom equivalents.\n */\n\nconst emptyObject = {};\n\nconst supportsCSS3TextDecoration =\n  !canUseDOM ||\n  (window.CSS != null &&\n    window.CSS.supports != null &&\n    (window.CSS.supports('text-decoration-line', 'none') ||\n      window.CSS.supports('-webkit-text-decoration-line', 'none')));\n\n/**\n * Transform\n */\n\n// { scale: 2 } => 'scale(2)'\n// { translateX: 20 } => 'translateX(20px)'\n// { matrix: [1,2,3,4,5,6] } => 'matrix(1,2,3,4,5,6)'\nconst mapTransform = (transform) => {\n  const type = Object.keys(transform)[0];\n  const value = transform[type];\n  if (type === 'matrix' || type === 'matrix3d') {\n    return `${type}(${value.join(',')})`;\n  } else {\n    const normalizedValue = normalizeValueWithProperty(value, type);\n    return `${type}(${normalizedValue})`;\n  }\n};\n\nconst resolveTransform = (resolvedStyle, style) => {\n  let transform = style.transform;\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  }\n  resolvedStyle.transform = transform;\n};\n\n/**\n * Reducer\n */\n\nconst createReactDOMStyle = (style) => {\n  if (!style) {\n    return emptyObject;\n  }\n\n  const resolvedStyle = {};\n\n  Object.keys(style)\n    .sort()\n    .forEach((prop) => {\n      const value = normalizeValueWithProperty(style[prop], prop);\n\n      // Ignore everything else with a null value\n      if (value == null) {\n        return;\n      }\n\n      switch (prop) {\n        // Ignore some React Native styles\n        case 'elevation':\n        case 'overlayColor':\n        case 'resizeMode':\n        case 'tintColor': {\n          break;\n        }\n\n        case 'aspectRatio': {\n          resolvedStyle[prop] = value.toString();\n          break;\n        }\n\n        // TODO: remove once this issue is fixed\n        // https://github.com/rofrischmann/inline-style-prefixer/issues/159\n        case 'backgroundClip': {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n          break;\n        }\n\n        // The 'flex' property value in React Native must be a positive integer,\n        // 0, or -1.\n        case 'flex': {\n          if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          } else {\n            resolvedStyle.flex = value;\n          }\n          break;\n        }\n\n        case 'font': {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n        case 'fontFamily': {\n          if (value.indexOf('System') > -1) {\n            const stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n          break;\n        }\n\n        case 'fontVariant': {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n          break;\n        }\n\n        case 'textAlignVertical': {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n        case 'textDecorationLine': {\n          // use 'text-decoration' for browsers that only support CSS2\n          // text-decoration (e.g., IE, Edge)\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n          break;\n        }\n\n        case 'transform':\n        case 'transformMatrix': {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n        case 'writingDirection': {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n        default: {\n          const longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n          if (longFormProperties) {\n            longFormProperties.forEach((longForm, i) => {\n              // The value of any longform property in the original styles takes\n              // precedence over the shortform's value.\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n      }\n    });\n\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}